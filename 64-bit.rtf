{\rtf1 \ansi 
{\colortbl;
\red0\green0\blue0;
\red255\green255\blue255;
\red255\green0\blue0;
\red0\green255\blue0;
\red0\green0\blue255;
\red0\green255\blue255;
\red255\green0\blue255;
\red255\green255\blue0;
\red0\green0\blue128;
\red0\green128\blue128;
\red0\green128\blue0;
\red128\green0\blue128;
\red128\green0\blue0;
\red128\green128\blue0;
\red128\green128\blue128;
\red192\green192\blue192;
}
{\fonttbl; {
\f0 arial}{
\f1 symbol}{
\f2 times new roman}{
\f3 serif}{
\f4 sans-serif}{
\f5 monospace}
}
{\*\generator Apache XML Graphics RTF Library;}
\fet0 \ftnbj 
{\*\listtable
{\list\listtemplateid-723955400\listsimple{\listlevel\leveljc\levelfollow0\levelspace0\levelindent0{\leveltext\'01?}{\levelnumbers}}{\listname ;}\listid-1155484576}
{\list\listtemplateid-1690734402\listsimple{\listlevel\leveljc\levelfollow0\levelspace0\levelindent0{\leveltext\'01?}{\levelnumbers}}{\listname ;}\listid1033096058}
{\list\listtemplateid1327362106\listsimple{\listlevel\leveljc\levelfollow0\levelspace0\levelindent0{\leveltext\'01?}{\levelnumbers}}{\listname ;}\listid-1557280266}
{\list\listtemplateid502539523\listsimple{\listlevel\leveljc\levelfollow0\levelspace0\levelindent0{\leveltext\'01?}{\levelnumbers}}{\listname ;}\listid-1930858313}
{\list\listtemplateid-938301587\listsimple{\listlevel\leveljc\levelfollow0\levelspace0\levelindent0{\leveltext\'01?}{\levelnumbers}}{\listname ;}\listid-1728529858}
{\list\listtemplateid1085665355\listsimple{\listlevel\leveljc\levelfollow0\levelspace0\levelindent0{\leveltext\'01?}{\levelnumbers}}{\listname ;}\listid1431162155}
{\list\listtemplateid-1661998771\listsimple{\listlevel\leveljc\levelfollow0\levelspace0\levelindent0{\leveltext\'01?}{\levelnumbers}}{\listname ;}\listid1654374947}
{\list\listtemplateid-73789608\listsimple{\listlevel\leveljc\levelfollow0\levelspace0\levelindent0{\leveltext\'01?}{\levelnumbers}}{\listname ;}\listid-65105105}
{\list\listtemplateid99135751\listsimple{\listlevel\leveljc\levelfollow0\levelspace0\levelindent0{\leveltext\'01?}{\levelnumbers}}{\listname ;}\listid-518907128}
{\list\listtemplateid755814641\listsimple{\listlevel\leveljc\levelfollow0\levelspace0\levelindent0\levelstartat1{\leveltext\'03\'00. ;}{\levelnumbers\'01;}\f0 }{\listname ;}\listid-252332814}
{\list\listtemplateid1344049776\listsimple{\listlevel\leveljc\levelfollow0\levelspace0\levelindent0\levelstartat1{\leveltext\'03\'00. ;}{\levelnumbers\'01;}\f0 }{\listname ;}\listid1180918287}
{\list\listtemplateid1580443894\listsimple{\listlevel\leveljc\levelfollow0\levelspace0\levelindent0{\leveltext\'01?}{\levelnumbers}}{\listname ;}\listid553609048}
{\list\listtemplateid-1266264776\listsimple{\listlevel\leveljc\levelfollow0\levelspace0\levelindent0{\leveltext\'01?}{\levelnumbers}}{\listname ;}\listid629649304}
{\list\listtemplateid5955764\listsimple{\listlevel\leveljc\levelfollow0\levelspace0\levelindent0{\leveltext\'01?}{\levelnumbers}}{\listname ;}\listid99807007}
{\list\listtemplateid39620447\listsimple{\listlevel\leveljc\levelfollow0\levelspace0\levelindent0{\leveltext\'01?}{\levelnumbers}}{\listname ;}\listid-1946737912}
{\list\listtemplateid-1877116806\listsimple{\listlevel\leveljc\levelfollow0\levelspace0\levelindent0{\leveltext\'01?}{\levelnumbers}}{\listname ;}\listid-152527805}
{\list\listtemplateid1086124775\listsimple{\listlevel\leveljc\levelfollow0\levelspace0\levelindent0{\leveltext\'01?}{\levelnumbers}}{\listname ;}\listid448784075}
{\list\listtemplateid1227951724\listsimple{\listlevel\leveljc\levelfollow0\levelspace0\levelindent0{\leveltext\'01?}{\levelnumbers}}{\listname ;}\listid-1609984092}
{\list\listtemplateid64111306\listsimple{\listlevel\leveljc\levelfollow0\levelspace0\levelindent0{\leveltext\'01?}{\levelnumbers}}{\listname ;}\listid1764356251}
{\list\listtemplateid-100082026\listsimple{\listlevel\leveljc\levelfollow0\levelspace0\levelindent0{\leveltext\'01?}{\levelnumbers}}{\listname ;}\listid-960731419}
{\list\listtemplateid-1339022546\listsimple{\listlevel\leveljc\levelfollow0\levelspace0\levelindent0{\leveltext\'01?}{\levelnumbers}}{\listname ;}\listid-39845375}
{\list\listtemplateid-568315836\listsimple{\listlevel\leveljc\levelfollow0\levelspace0\levelindent0{\leveltext\'01?}{\levelnumbers}}{\listname ;}\listid2092649110}
{\list\listtemplateid-81839914\listsimple{\listlevel\leveljc\levelfollow0\levelspace0\levelindent0{\leveltext\'01?}{\levelnumbers}}{\listname ;}\listid-1089884900}
{\list\listtemplateid-1846688624\listsimple{\listlevel\leveljc\levelfollow0\levelspace0\levelindent0{\leveltext\'01?}{\levelnumbers}}{\listname ;}\listid-1146103148}
}
{\*\listoverridetable
{\*\listoverride{\listid-1155484576\listoverridecount0\ls1}}
{\*\listoverride{\listid1033096058\listoverridecount0\ls2}}
{\*\listoverride{\listid-1557280266\listoverridecount0\ls3}}
{\*\listoverride{\listid-1930858313\listoverridecount0\ls4}}
{\*\listoverride{\listid-1728529858\listoverridecount0\ls5}}
{\*\listoverride{\listid1431162155\listoverridecount0\ls6}}
{\*\listoverride{\listid1654374947\listoverridecount0\ls7}}
{\*\listoverride{\listid-65105105\listoverridecount0\ls8}}
{\*\listoverride{\listid-518907128\listoverridecount0\ls9}}
{\*\listoverride{\listid-252332814\listoverridecount0\ls10}}
{\*\listoverride{\listid1180918287\listoverridecount0\ls11}}
{\*\listoverride{\listid553609048\listoverridecount0\ls12}}
{\*\listoverride{\listid629649304\listoverridecount0\ls13}}
{\*\listoverride{\listid99807007\listoverridecount0\ls14}}
{\*\listoverride{\listid-1946737912\listoverridecount0\ls15}}
{\*\listoverride{\listid-152527805\listoverridecount0\ls16}}
{\*\listoverride{\listid448784075\listoverridecount0\ls17}}
{\*\listoverride{\listid-1609984092\listoverridecount0\ls18}}
{\*\listoverride{\listid1764356251\listoverridecount0\ls19}}
{\*\listoverride{\listid-960731419\listoverridecount0\ls20}}
{\*\listoverride{\listid-39845375\listoverridecount0\ls21}}
{\*\listoverride{\listid2092649110\listoverridecount0\ls22}}
{\*\listoverride{\listid-1089884900\listoverridecount0\ls23}}
{\*\listoverride{\listid-1146103148\listoverridecount0\ls24}}
}
\paperw11905 \paperh16837 \margt1440 \margb1440 \margl1440 \margr1440 \headery1296 \footery1296 
\sectd {\header 
{\ri0 \i0 \fs20 \cf1 \f3 \li-960 \b0 \qj {
{\trowd \itap0 \trleft0 \trrh280 
\clbrdrt \clbrdrb \brdrs \brdrw10 \brdrcf1 \clbrdrl \ql \cellx2000 \ql 
\clbrdrt \clbrdrb \brdrs \brdrw10 \brdrcf1 \ql \cellx4000 \ql 
\clbrdrt \clbrdrb \brdrs \brdrw10 \brdrcf1 \clbrdrr \ql \cellx6000 \ql 
\intbl 
{\ri0 \i0 \ql \fs20 \cf1 \f3 \li-960 \b0 
{\ri0 \i0 \ql \fs20 \cf1 \f3 \li-960 \b0 
}
}\ql \intbl \cell \intbl 
{\ri0 \i0 \fs20 \cf1 \f3 \li-960 \qc \b0 
{\ri0 \i0 \fs20 \cf1 \f3 \li-960 \qc \b0 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Programming Recommendations For 32-bit And 64-bit Clean Programs
\par 
}
}
}\ql \intbl \cell \intbl 
{\ri0 \i0 \fs20 \cf1 \f3 \li-960 \qr \b0 
{\ri0 \i0 \fs20 \cf1 \f3 \li-960 \qr \b0 
}
}\ql \intbl \cell \row }}
}}{\footer 
{\ri0 \i0 \fs20 \cf1 \f3 \li-960 \b0 \qj {
{\trowd \itap0 \trleft0 \trrh280 
\clbrdrt \brdrs \brdrw10 \brdrcf1 \clbrdrb \clbrdrl \ql \cellx2000 \ql 
\clbrdrt \brdrs \brdrw10 \brdrcf1 \clbrdrb \ql \cellx4000 \ql 
\clbrdrt \brdrs \brdrw10 \brdrcf1 \clbrdrb \clbrdrr \ql \cellx6000 \ql 
\intbl 
{\ri0 \i0 \ql \fs20 \cf1 \f3 \li-960 \b0 
{\ri0 \i0 \ql \fs20 \cf1 \f3 \li-960 \b0 
}
}\ql \intbl \cell \intbl 
{\ri0 \i0 \fs20 \cf1 \f3 \li-960 \qc \b0 
{\ri0 \i0 \fs20 \cf1 \f3 \li-960 \qc \b0 
{\b0 \i0 \fs20 \f3 \chpgn }
\par 
}
}\ql \intbl \cell \intbl 
{\ri0 \i0 \fs20 \cf1 \f3 \li-960 \qr \b0 
{\ri0 \i0 \fs20 \cf1 \f3 \li-960 \qr \b0 
}
}\ql \intbl \cell \row }}
}}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\*\bkmkstart id2831346}{\*\bkmkend id2831346}
\par 
{\ri0 \i0 \fs20 \cf1 \f4 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li0 \qc \b0 
{\ri0 \i0 \fs49 \cf1 \f4 \li0 \qc \b1 
{\ri0 \i0 \fs49 \cf1 \f4 \li0 \qc \b1 
{\i0 \fs49 \sa0 \cf1 \f4 \b1 \sb200 
Programming Recommendations For 32-bit And 64-bit Clean Programs
\par 
}
}
}
{\ri0 \i0 \fs28 \cf1 \f4 \li0 \qc \b0 
{\ri0 \i0 \fs28 \cf1 \f4 \li0 \qc \b0 
{\i0 \fs28 \sa0 \cf1 \f4 \b0 \sb144 
Tommy Reynolds
\par 
}
}
}
}
{\ri0 \i0 \fs20 \cf1 \f4 \li0 \b0 \qj 
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\*\bkmkstart toc___id2831346}{\*\bkmkend toc___id2831346}
\par 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs34 \cf1 \f4 \li-960 \b1 \qj 
{\i0 \fs34 \sa172 \cf1 \f4 \b1 \sb718 
Table of Contents
\par 
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
}
}
{\ri480 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \cf1 \f3 \b0 \sb0 
{\field {\*\fldinst HYPERLINK "#sn-intro" }{\fldrslt 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Introduction
}}}
}
{\i0 \fs20 \cf1 \f3 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 
}
{\field {\*\fldinst HYPERLINK "#sn-intro" }{\fldrslt }}
\par 
}
}
{\ri480 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \cf1 \f3 \b0 \sb0 
{\field {\*\fldinst HYPERLINK "#sn-compilation" }{\fldrslt 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Compiling Programs For 32-Bit or 64-Bit Mode
}}}
}
{\i0 \fs20 \cf1 \f3 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 
}
{\field {\*\fldinst HYPERLINK "#sn-compilation" }{\fldrslt }}
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li480 \b0 \qj 
{\*\bkmkstart toc_id2831346_sn-compilation}{\*\bkmkend toc_id2831346_sn-compilation}
\par 
{\ri480 \i0 \fs20 \cf1 \f3 \li480 \b0 \qj 
{\i0 \fs20 \cf1 \f3 \b0 \sb0 
{\field {\*\fldinst HYPERLINK "#sn-warnings" }{\fldrslt 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Let The Compiler Do Its Job
}}}
}
{\i0 \fs20 \cf1 \f3 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 
}
{\field {\*\fldinst HYPERLINK "#sn-warnings" }{\fldrslt }}
\par 
}
}
{\ri480 \i0 \fs20 \cf1 \f3 \li480 \b0 \qj 
{\i0 \fs20 \cf1 \f3 \b0 \sb0 
{\field {\*\fldinst HYPERLINK "#sn-compilation-32" }{\fldrslt 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Compiling For A 32-Bit World
}}}
}
{\i0 \fs20 \cf1 \f3 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 
}
{\field {\*\fldinst HYPERLINK "#sn-compilation-32" }{\fldrslt }}
\par 
}
}
{\ri480 \i0 \fs20 \cf1 \f3 \li480 \b0 \qj 
{\i0 \fs20 \cf1 \f3 \b0 \sb0 
{\field {\*\fldinst HYPERLINK "#sn-compilation-64" }{\fldrslt 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Compiling For A 64-bit World
}}}
}
{\i0 \fs20 \cf1 \f3 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 
}
{\field {\*\fldinst HYPERLINK "#sn-compilation-64" }{\fldrslt }}
\par 
}
}
}
{\ri480 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \cf1 \f3 \b0 \sb0 
{\field {\*\fldinst HYPERLINK "#sn-objects" }{\fldrslt 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
The Objects Of My Desire
}}}
}
{\i0 \fs20 \cf1 \f3 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 
}
{\field {\*\fldinst HYPERLINK "#sn-objects" }{\fldrslt }}
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li480 \b0 \qj 
{\*\bkmkstart toc_id2831346_sn-objects}{\*\bkmkend toc_id2831346_sn-objects}
\par 
{\ri480 \i0 \fs20 \cf1 \f3 \li480 \b0 \qj 
{\i0 \fs20 \cf1 \f3 \b0 \sb0 
{\field {\*\fldinst HYPERLINK "#sn-objects-sizes" }{\fldrslt 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Size Does Matter
}}}
}
{\i0 \fs20 \cf1 \f3 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 
}
{\field {\*\fldinst HYPERLINK "#sn-objects-sizes" }{\fldrslt }}
\par 
}
}
{\ri480 \i0 \fs20 \cf1 \f3 \li480 \b0 \qj 
{\i0 \fs20 \cf1 \f3 \b0 \sb0 
{\field {\*\fldinst HYPERLINK "#sn-objects-pointers" }{\fldrslt 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Pointers Versus Objects
}}}
}
{\i0 \fs20 \cf1 \f3 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 
}
{\field {\*\fldinst HYPERLINK "#sn-objects-pointers" }{\fldrslt }}
\par 
}
}
}
{\ri480 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \cf1 \f3 \b0 \sb0 
{\field {\*\fldinst HYPERLINK "#sn-alignment" }{\fldrslt 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Variable Alignment Issues
}}}
}
{\i0 \fs20 \cf1 \f3 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 
}
{\field {\*\fldinst HYPERLINK "#sn-alignment" }{\fldrslt }}
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li480 \b0 \qj 
{\*\bkmkstart toc_id2831346_sn-alignment}{\*\bkmkend toc_id2831346_sn-alignment}
\par 
{\ri480 \i0 \fs20 \cf1 \f3 \li480 \b0 \qj 
{\i0 \fs20 \cf1 \f3 \b0 \sb0 
{\field {\*\fldinst HYPERLINK "#sn-alignment-basic" }{\fldrslt 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Address Arithmetic
}}}
}
{\i0 \fs20 \cf1 \f3 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 
}
{\field {\*\fldinst HYPERLINK "#sn-alignment-basic" }{\fldrslt }}
\par 
}
}
{\ri480 \i0 \fs20 \cf1 \f3 \li480 \b0 \qj 
{\i0 \fs20 \cf1 \f3 \b0 \sb0 
{\field {\*\fldinst HYPERLINK "#sn-alignment-struct" }{\fldrslt 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Packed Structures
}}}
}
{\i0 \fs20 \cf1 \f3 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 
}
{\field {\*\fldinst HYPERLINK "#sn-alignment-struct" }{\fldrslt }}
\par 
}
}
}
{\ri480 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \cf1 \f3 \b0 \sb0 
{\field {\*\fldinst HYPERLINK "#sn-guidelines" }{\fldrslt 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Coding Guidelines
}}}
}
{\i0 \fs20 \cf1 \f3 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 
}
{\field {\*\fldinst HYPERLINK "#sn-guidelines" }{\fldrslt }}
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li480 \b0 \qj 
{\*\bkmkstart toc_id2831346_sn-guidelines}{\*\bkmkend toc_id2831346_sn-guidelines}
\par 
{\ri480 \i0 \fs20 \cf1 \f3 \li480 \b0 \qj 
{\i0 \fs20 \cf1 \f3 \b0 \sb0 
{\field {\*\fldinst HYPERLINK "#sn-guidelines-do" }{\fldrslt 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Do
}}}
}
{\i0 \fs20 \cf1 \f3 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 
}
{\field {\*\fldinst HYPERLINK "#sn-guidelines-do" }{\fldrslt }}
\par 
}
}
{\ri480 \i0 \fs20 \cf1 \f3 \li480 \b0 \qj 
{\i0 \fs20 \cf1 \f3 \b0 \sb0 
{\field {\*\fldinst HYPERLINK "#sn-guidelines-dont" }{\fldrslt 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Don\rquote t
}}}
}
{\i0 \fs20 \cf1 \f3 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 
}
{\i0 \fs20 \sa200 \cf1 \f3 \b0 \sb0 
 
}
{\field {\*\fldinst HYPERLINK "#sn-guidelines-dont" }{\fldrslt }}
\par 
}
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\*\bkmkstart sn-intro}{\*\bkmkend sn-intro}
\par 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b1 \qj 
{\ri0 \i0 \fs41 \cf1 \f4 \li-960 \b1 \qj 
{\i0 \fs41 \sa0 \cf1 \f4 \b1 \sb200 
Introduction
\par 
}
}
}
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
Programmers frequently rely on unstated assumptions about their programming environment that are contrary-to-fact. Their efforts may appear to work in one environment but may fail miserably in a different, equally-conforming environment. What went wrong?
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
The C language standard, which specifies the standards with which a C compiler is expected to conform, leaves some surprising details up to to each indivual compiler writer. These topics are deliberatly vague to allow as many environments as possible to support the C language, but can trip-up an unwary programmer.
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
The following paragraphs describe both how to protect oneself and how to deal with common portability issues encountered in the migration from a 32-bit program design to a 64-bit design.
\par 
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\*\bkmkstart sn-compilation}{\*\bkmkend sn-compilation}
\par 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b1 \qj 
{\ri0 \i0 \fs41 \cf1 \f4 \li-960 \b1 \qj 
{\i0 \fs41 \sa0 \cf1 \f4 \b1 \sb200 
Compiling Programs For 32-Bit or 64-Bit Mode
\par 
}
}
}
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
The GCC programming toolchain (compiler and runtime libraries) have been updated so that 
}
{\i1 \fs20 \cf1 \f3 \b0 \sb0 
{\i1 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
no
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
 source code changes are necessary for either 32-bit or 64-bit operation. All that is needed is to tell the compiler what you want.
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
Trying to build an executable using a mixture of 32-bit and 64-bit objects is not going to work.
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
Earlier toolchain versions required heavy magic in the compilation command line, providing preprocessor symbol definitions and such. Not any more.
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\*\bkmkstart sn-warnings}{\*\bkmkend sn-warnings}
\par 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b1 \qj 
{\ri0 \i0 \fs34 \cf1 \f4 \li-960 \b1 \qj 
{\i0 \fs34 \sa0 \cf1 \f4 \b1 \sb200 
Let The Compiler Do Its Job
\par 
}
}
}
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
The GCC compiler suite is rather good at identifying potential misuses and mismatches of variable types. Since the program analysis and code generation phases of gcc are language-indepentent, they rely very heavily on variable types and program flow structure rather than upon any expectations based on the programming language. Thus, any displayed warnings should be viewed as the compiler announcing an assumption it has made about the code.
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Unfortunately, many GCC warnings are not enabled by default. Other errors are detected by the code optmization phase; without having a 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
-O
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
 command-line switch, these checks are not made at all.
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
Below are a suggested list of compilation flags which are valuable in writing code to be used in an heterogenous 32-bit and 64-bit environment.
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\*\bkmkstart sn-warnings-lang}{\*\bkmkend sn-warnings-lang}
\par 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b1 \qj 
{\ri0 \i0 \fs28 \cf1 \f4 \li-960 \b1 \qj 
{\i0 \fs28 \sa0 \cf1 \f4 \b1 \sb200 
Specify Source Code Language
\par 
}
}
}
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
Strictly speaking, the default C language accepted by the gcc compiler is not really C at all. Instead, it is a hodge-podge collection of language constructs used to write C code over the years; the goal here is not to break many legacy programs.
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
The default C language used by gcc should never be used to write new code. Firstly, the resulting code will not be C but \ldblquote GNU C\rdblquote  frankencode instead. Secondly, if the default for the language changes, as it is planned to do in the indeterminate future, the program code will no longer be valid.
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
Below is a table showing the current C language standards supported by the GNU GCC compiler suite. This document makes no recommendation about which standard should be selected, but be aware that making no selection is a selection too.
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\*\bkmkstart tbl-std}{\*\bkmkend tbl-std}
\par 
{\ri0 \i0 \fs24 \cf1 \f3 \li0 \b1 \qj 
{\i0 \fs24 \sa144 \cf1 \f3 \b1 \sb240 
Table\u160\'3f1.\u160\'3fGCC C Standard Selection
\par 
}
}{
{\trowd \itap0 \trleft0 \trhdr 
\clpadt40 \clpadft3 \clpadb40 \clpadfb3 \clpadl40 \clpadfl3 \clpadr40 \clpadfr3 \clbrdrt \brdrs \brdrw10 \brdrcf1 \clbrdrb \brdrs \brdrw10 \brdrcf1 \clbrdrl \brdrs \brdrw10 \brdrcf1 \clbrdrr \brdrs \brdrw10 \brdrcf1 \ql \cellx2000 \ql 
\clpadt40 \clpadft3 \clpadb40 \clpadfb3 \clpadl40 \clpadfl3 \clpadr40 \clpadfr3 \clbrdrt \brdrs \brdrw10 \brdrcf1 \clbrdrb \brdrs \brdrw10 \brdrcf1 \clbrdrr \brdrs \brdrw10 \brdrcf1 \ql \cellx4000 \ql 
\intbl 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b1 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b1 \sb0 
Option
}
}\ql \intbl \cell \intbl 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b1 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b1 \sb0 
Description
}
}\ql \intbl \cell \row }
{\trowd \itap0 \trleft0 
\clpadt40 \clpadft3 \clpadb40 \clpadfb3 \clpadl40 \clpadfl3 \clpadr40 \clpadfr3 \clbrdrb \brdrs \brdrw10 \brdrcf1 \clbrdrl \brdrs \brdrw10 \brdrcf1 \clbrdrr \brdrs \brdrw10 \brdrcf1 \ql \cellx2000 \ql 
\clpadt40 \clpadft3 \clpadb40 \clpadfb3 \clpadl40 \clpadfl3 \clpadr40 \clpadfr3 \clbrdrb \brdrs \brdrw10 \brdrcf1 \clbrdrr \brdrs \brdrw10 \brdrcf1 \ql \cellx4000 \ql 
\intbl 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
-std=c89
}
}
}\ql \intbl \cell \intbl 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
ISO C90, same as 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
-ansi
}
}
}\ql \intbl \cell \row }
{\trowd \itap0 \trleft0 
\clpadt40 \clpadft3 \clpadb40 \clpadfb3 \clpadl40 \clpadfl3 \clpadr40 \clpadfr3 \clbrdrb \brdrs \brdrw10 \brdrcf1 \clbrdrl \brdrs \brdrw10 \brdrcf1 \clbrdrr \brdrs \brdrw10 \brdrcf1 \ql \cellx2000 \ql 
\clpadt40 \clpadft3 \clpadb40 \clpadfb3 \clpadl40 \clpadfl3 \clpadr40 \clpadfr3 \clbrdrb \brdrs \brdrw10 \brdrcf1 \clbrdrr \brdrs \brdrw10 \brdrcf1 \ql \cellx4000 \ql 
\intbl 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
-std=gnu89
}
}
}\ql \intbl \cell \intbl 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Default; ISO C90 plus GCC extentions; includes some C99 features
}
}\ql \intbl \cell \row }
{\trowd \itap0 \trleft0 
\clpadt40 \clpadft3 \clpadb40 \clpadfb3 \clpadl40 \clpadfl3 \clpadr40 \clpadfr3 \clbrdrb \brdrs \brdrw10 \brdrcf1 \clbrdrl \brdrs \brdrw10 \brdrcf1 \clbrdrr \brdrs \brdrw10 \brdrcf1 \ql \cellx2000 \ql 
\clpadt40 \clpadft3 \clpadb40 \clpadfb3 \clpadl40 \clpadfl3 \clpadr40 \clpadfr3 \clbrdrb \brdrs \brdrw10 \brdrcf1 \clbrdrr \brdrs \brdrw10 \brdrcf1 \ql \cellx4000 \ql 
\intbl 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
-std=c99
}
}
}\ql \intbl \cell \intbl 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
ISO C99, not yet fully supported; check 
}
{\field {\*\fldinst HYPERLINK "url(http://gcc.gnu.org/gcc-3.4/c99status.html)" }{\fldrslt 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
http://gcc.gnu.org/gcc-3.4/c99status.html
}}}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 for details.
}
}\ql \intbl \cell \row }
{\trowd \itap0 \trleft0 
\clpadt40 \clpadft3 \clpadb40 \clpadfb3 \clpadl40 \clpadfl3 \clpadr40 \clpadfr3 \clbrdrb \brdrs \brdrw10 \brdrcf1 \clbrdrl \brdrs \brdrw10 \brdrcf1 \clbrdrr \brdrs \brdrw10 \brdrcf1 \ql \cellx2000 \ql 
\clpadt40 \clpadft3 \clpadb40 \clpadfb3 \clpadl40 \clpadfl3 \clpadr40 \clpadfr3 \clbrdrb \brdrs \brdrw10 \brdrcf1 \clbrdrr \brdrs \brdrw10 \brdrcf1 \ql \cellx4000 \ql 
\intbl 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
-std=gnu99
}
}
}\ql \intbl \cell \intbl 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
ISO C99, plus GCC extentions; when C99 support is complete, this will become the new default
}
}\ql \intbl \cell \row }}
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\*\bkmkstart sn-warnings-none}{\*\bkmkend sn-warnings-none}
\par 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b1 \qj 
{\ri0 \i0 \fs28 \cf1 \f4 \li-960 \b1 \qj 
{\i0 \fs28 \sa0 \cf1 \f4 \b1 \sb200 
Every Warning Should Be Corrected
\par 
}
}
}
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
The goal should be that 
}
{\i1 \fs20 \cf1 \f3 \b0 \sb0 
{\i1 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
no
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
 warnings be reported by the compiler. If you see no warnings, you do not need to decide which warnings are harmless.
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
For example, the Linux kernel has about 6 million lines of code. Compiling them all results in only a few dozen warnings, and these are being stamped out.
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
Recall that an gcc warning is really a cry for help from the compiler: it was faced with a decision that could not be made based on information gleaned from the code and the compiler made a best guess.
\par 
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\*\bkmkstart sn-warnings-opt}{\*\bkmkend sn-warnings-opt}
\par 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b1 \qj 
{\ri0 \i0 \fs28 \cf1 \f4 \li-960 \b1 \qj 
{\i0 \fs28 \sa0 \cf1 \f4 \b1 \sb200 
Enable Program Optmization
\par 
}
}
}
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Some warnings, such as those for uninitialized variables, cannot be detected unless the optmization phase is enabled. Use the 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
-O
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
 command line switch for this.
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
The GCC compilers can do varying amounts of optmization, from none to mangle-beyond-recognition. Its aggressive optmizations, 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
-O3
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
 and above, can make the code impossible to debug.
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Code compiled for debugging should use the 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
-O0
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
 switch; that is a dash-big_oh-zero sequence. The optimizer pass is run, but not allowed to actually shuffle the code around; perfect for detecting warnings and allowing debug both.
\par 
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\*\bkmkstart sn-warnings-error}{\*\bkmkend sn-warnings-error}
\par 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b1 \qj 
{\ri0 \i0 \fs28 \cf1 \f4 \li-960 \b1 \qj 
{\i0 \fs28 \sa0 \cf1 \f4 \b1 \sb0 
Switch 
}
{\i0 \fs28 \cf1 \f5 \b1 \sb0 
{\i0 \fs28 \sa0 \cf1 \f5 \b1 \sb200 
-Werror
\par 
}
}
}
}
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
By default, warnings are exactly that: a line of text written by the compiler but that do not disturb the compilation. 
}
{\i1 \fs20 \cf1 \f3 \b0 \sb0 
{\i1 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Warnings
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 are not 
}
{\i1 \fs20 \cf1 \f3 \b0 \sb0 
{\i1 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
errors
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
.
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Supplying the 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
-Werror
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
 switch changes that. Any warning will be treated as a compilation error and will disrupt the compilation.
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
In spite of your initial repulse, you 
}
{\i1 \fs20 \cf1 \f3 \b0 \sb0 
{\i1 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
do
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
 want this behavior.
\par 
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\*\bkmkstart sn-warnings-wall}{\*\bkmkend sn-warnings-wall}
\par 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b1 \qj 
{\ri0 \i0 \fs28 \cf1 \f4 \li-960 \b1 \qj 
{\i0 \fs28 \sa0 \cf1 \f4 \b1 \sb0 
Switch 
}
{\i0 \fs28 \cf1 \f5 \b1 \sb0 
{\i0 \fs28 \sa0 \cf1 \f5 \b1 \sb200 
-Wall
\par 
}
}
}
}
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
Enables all warnings.
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Well, not really all of them but just many common warnings. There are a vast number of additional warnings that you can read about by using the 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
info gcc
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
 command-line tool. Warnings may be enabled or disabled on an individual basis.
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
You emphatically want this.
\par 
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\*\bkmkstart sn-warnings-extra}{\*\bkmkend sn-warnings-extra}
\par 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b1 \qj 
{\ri0 \i0 \fs28 \cf1 \f4 \li-960 \b1 \qj 
{\i0 \fs28 \sa0 \cf1 \f4 \b1 \sb0 
Switch 
}
{\i0 \fs28 \cf1 \f5 \b1 \sb0 
{\i0 \fs28 \sa0 \cf1 \f5 \b1 \sb200 
-Wextra
\par 
}
}
}
}
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Use the 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
-Wextra
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
 switch to detect bad practices such as:
\par 
}
}\pard \fi-360 \li {\*\pn \pnlvlblt \ilvl0 \ls1 \pnindent0 \pnf1 {\f2 \pntxtb ? }}\ls1 {\pntext }
{\ri0 \i0 \fs20 \cf1 \f3 \li300 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Falling off the end of a non-
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
void
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 function.
\par {\pntext }
}
}\pard \pard \fi-360 \li {\*\pn \pnlvlblt \ilvl0 \ls2 \pnindent0 \pnf1 {\f2 \pntxtb ? }}\ls2 {\pntext }
{\ri0 \i0 \fs20 \cf1 \f3 \li300 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
An expression with no side effects. Otherwise the expression will be evaluated and the value discarded; a waste of time and memory.
\par {\pntext }
}
}\pard \pard \fi-360 \li {\*\pn \pnlvlblt \ilvl0 \ls3 \pnindent0 \pnf1 {\f2 \pntxtb ? }}\ls3 {\pntext }
{\ri0 \i0 \fs20 \cf1 \f3 \li300 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Comparing an unsigned value with 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
< 0
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 and its friends like 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
<= 0
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 get flagged.
\par {\pntext }
}
}\pard \pard \fi-360 \li {\*\pn \pnlvlblt \ilvl0 \ls4 \pnindent0 \pnf1 {\f2 \pntxtb ? }}\ls4 {\pntext }
{\ri0 \i0 \fs20 \cf1 \f3 \li300 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Warn about unused function paramters.
\par {\pntext }
}
}\pard \pard \fi-360 \li {\*\pn \pnlvlblt \ilvl0 \ls5 \pnindent0 \pnf1 {\f2 \pntxtb ? }}\ls5 {\pntext }
{\ri0 \i0 \fs20 \cf1 \f3 \li300 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Warn about comparison between signed and unsigned values. While this is \ldblquote legal\rdblquote , interpreting the answer has changed and may produce unexpected results.
\par {\pntext }
}
}\pard \pard \fi-360 \li {\*\pn \pnlvlblt \ilvl0 \ls6 \pnindent0 \pnf1 {\f2 \pntxtb ? }}\ls6 {\pntext }
{\ri0 \i0 \fs20 \cf1 \f3 \li300 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Function paramters declared using K&R-style notation without types.
\par {\pntext }
}
}\pard 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Usually, you 
}
{\i1 \fs20 \cf1 \f3 \b0 \sb0 
{\i1 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
do
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
 want these additional warnings.
\par 
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\*\bkmkstart sn-warnings-pedantic}{\*\bkmkend sn-warnings-pedantic}
\par 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b1 \qj 
{\ri0 \i0 \fs28 \cf1 \f4 \li-960 \b1 \qj 
{\i0 \fs28 \sa0 \cf1 \f4 \b1 \sb0 
Switch 
}
{\i0 \fs28 \cf1 \f5 \b1 \sb0 
{\i0 \fs28 \sa0 \cf1 \f5 \b1 \sb200 
-pedantic
\par 
}
}
}
}
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Enables 
}
{\i1 \fs20 \cf1 \f3 \b0 \sb0 
{\i1 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
all
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 warnings required by the selected language standard. Unless the 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
-Werror
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 flag is also used, this switch should be given as 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
-pedantic-errors
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
 to promote the warnings into an error.
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Language standards require specific warnings to highlight dangerous constructs, or usage whose semantics may have changed. You 
}
{\i1 \fs20 \cf1 \f3 \b0 \sb0 
{\i1 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
do
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
 want to be notified about these.
\par 
}
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\*\bkmkstart sn-compilation-32}{\*\bkmkend sn-compilation-32}
\par 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b1 \qj 
{\ri0 \i0 \fs34 \cf1 \f4 \li-960 \b1 \qj 
{\i0 \fs34 \sa0 \cf1 \f4 \b1 \sb200 
Compiling For A 32-Bit World
\par 
}
}
}
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
To invoke the compiler for the 32-bit compilation model:
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \cf1 \f3 \b0 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb200 
gcc -m32 foo.c
}
}
{\i0 \fs20 \cf1 \f3 \b0 
\par 
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\*\bkmkstart sn-compilation-64}{\*\bkmkend sn-compilation-64}
\par 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b1 \qj 
{\ri0 \i0 \fs34 \cf1 \f4 \li-960 \b1 \qj 
{\i0 \fs34 \sa0 \cf1 \f4 \b1 \sb200 
Compiling For A 64-bit World
\par 
}
}
}
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
To invoke the compiler for the 64-bit compilation model:
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \cf1 \f3 \b0 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb200 
gcc -m64 foo.c
}
}
{\i0 \fs20 \cf1 \f3 \b0 
\par 
}
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\*\bkmkstart sn-objects}{\*\bkmkend sn-objects}
\par 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b1 \qj 
{\ri0 \i0 \fs41 \cf1 \f4 \li-960 \b1 \qj 
{\i0 \fs41 \sa0 \cf1 \f4 \b1 \sb200 
The Objects Of My Desire
\par 
}
}
}
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Since 32-bit programs and 64-bit programs actually utilize different hardware circuitry, it is only natural that the characteristics of common C language-based objects change as well. Most portability problems are caused by programmers forgetting the rules of the road. Since C objects are closely-coupled to their underlying hardware representation, the arbitrarily interchanging variable types often works as the programmer expects: an 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
unsigned
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 is simply a different interpretation of an 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
int
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
, right? And if you get in a bind, you can 
}
{\i1 \fs20 \cf1 \f3 \b0 \sb0 
{\i1 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
cast
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
 your way out of it, right?
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
This practice is what causes portability problems between 32-bit models and 64-bit models.
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
For example, on many machines (especially the common 32-bit platforms) a 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
sizeof(int)
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 is exactly the same as 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
sizeof(int *)
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
. Assuming this is true leads to constructs such as:
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \cf1 \f3 \b0 
}
{\ri0 \i0 \ql \fs20 \cf1 \f5 \li0 \b0 
{\i0 \fs20 \sa200 \cf1 \f5 \b0 \sb400 
\line int i;\line int * p;\line \line i = p;\line       
\par 
}
}
{\i0 \fs20 \cf1 \f3 \b0 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
Wait! That example causes a compilation error or warning about an incompatible assignment!
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
No problem, a 
}
{\i1 \fs20 \cf1 \f3 \b0 \sb0 
{\i1 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
cast
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
 will avoid the warning:
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \cf1 \f3 \b0 
}
{\ri0 \i0 \ql \fs20 \cf1 \f5 \li0 \b0 
{\i0 \fs20 \sa200 \cf1 \f5 \b0 \sb400 
i = (int) p;
\par 
}
}
{\i0 \fs20 \cf1 \f3 \b0 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Now the code will silently discard any higher-order address bits that cannot be saved into the 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
int
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
. The compiler no longer complains, but the code does not work as intended.
\par 
}
}
{\ri360 \i0 \fs20 \cf1 \f3 \li360 \b0 \qj 
{\*\bkmkstart id2887159}{\*\bkmkend id2887159}
\par 
{\ri360 \i0 \fs28 \cf1 \f3 \li360 \b1 \qj 
{\i0 \fs28 \sa0 \cf1 \f3 \b1 \sb200 
Cast It Out!
\par 
}
}
{\ri360 \i0 \fs20 \cf1 \f3 \li360 \b0 \qj 
{\ri360 \i0 \fs20 \cf1 \f3 \li360 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
A 
}
{\i1 \fs20 \cf1 \f3 \b0 \sb0 
{\i1 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
cast
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
 in a program should always be viewed with suspicion. It is commonly mis-used simply to silence compilation warnings instead of legitimately transforming a value to fit into another container.
\par 
}
}
{\ri360 \i0 \fs20 \cf1 \f3 \li360 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
The C language has defined rules that specifiy how values of one type are transformed into values of another type. If you attempt to circumvent this behavior using a 
}
{\i1 \fs20 \cf1 \f3 \b0 \sb0 
{\i1 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
cast
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
, do so only after careful review of your original data structure.
\par 
}
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\*\bkmkstart sn-objects-sizes}{\*\bkmkend sn-objects-sizes}
\par 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b1 \qj 
{\ri0 \i0 \fs34 \cf1 \f4 \li-960 \b1 \qj 
{\i0 \fs34 \sa0 \cf1 \f4 \b1 \sb200 
Size Does Matter
\par 
}
}
}
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
The C language enforces only a few contraints on compiler writers, and programmers in general, when it comes to basic program entities such as 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
int
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
\rquote s, 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
long
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
\rquote s, and the newer 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
long long
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
\rquote s. About the only constraint is that:
\par 
}
}
{\ri0 \i0 \ql \fs20 \cf1 \f5 \li0 \b0 
{\i0 \fs20 \sa200 \cf1 \f5 \b0 \sb200 
\line sizeof( char ) <= sizeof( short ) <= sizeof( int ) <= \\ \line sizeof( long ) <= sizeof( long long )\line       
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Nothing is said requiring a 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
char
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 to be eight bits; nothing requires that a 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
short
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 actually be smaller than an 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
long long
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
.
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Such decisions are left to the compiler designer, being regarded as a 
}
{\i1 \fs20 \cf1 \f3 \b0 \sb0 
{\i1 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
quality of implementation
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 issue and not of language conformance. Of course, they are strongly motivated to have their compiler not break the existing codebase but 
}
{\i1 \fs20 \cf1 \f3 \b0 \sb0 
{\i1 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
a conforming C compiler can legally make every object the same size
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
.
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Where it is important that program objects be able to handle numeric data with specific ranges, header files are usually available that define symbols such as 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
uint32_t
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
.
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Binary data interchange is especially sensitive to sizing differences of generic objects such as 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
int
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
\rquote s. Exported binary data should 
}
{\i1 \fs20 \cf1 \f3 \b0 \sb0 
{\i1 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
never
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
 be defined in terms of these generic variable types.
\par 
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\*\bkmkstart sn-objects-pointers}{\*\bkmkend sn-objects-pointers}
\par 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b1 \qj 
{\ri0 \i0 \fs34 \cf1 \f4 \li-960 \b1 \qj 
{\i0 \fs34 \sa0 \cf1 \f4 \b1 \sb200 
Pointers Versus Objects
\par 
}
}
}
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
We have seen that generic program container objects, such as an 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
int
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
, have a specified hierarchy of sizes.
\par 
}
}\pard \fi-360 \li {\*\pn \pnlvlblt \ilvl0 \ls7 \pnindent0 \pnf1 {\f2 \pntxtb ? }}\ls7 {\pntext }
{\ri0 \i0 \fs20 \cf1 \f3 \li300 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
The storage required to express a pointer to a container has no, repeat no, relationship to the size of the container.
\par {\pntext }
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li300 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
Expressed this way, the tendancy to try to save a pointer into a integer-sized container seems as silly as it really is but it still happens all too commonly. That it \ldblquote works\rdblquote  at all is happenstance. In every case.
\par {\pntext }
}
}\pard \pard \fi-360 \li {\*\pn \pnlvlblt \ilvl0 \ls8 \pnindent0 \pnf1 {\f2 \pntxtb ? }}\ls8 {\pntext }
{\ri0 \i0 \fs20 \cf1 \f3 \li300 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
There is no guarantee by the C language that all pointers are the same size. Expressed another way, the compiler designer has complete freedom to choose that 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
sizeof(int *)
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 be a different value than 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
sizeof(char *)
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
. Often embedded systems take advantage of this fact, but it is not common practice elsewhere.
\par {\pntext }
}
}\pard \pard \fi-360 \li {\*\pn \pnlvlblt \ilvl0 \ls9 \pnindent0 \pnf1 {\f2 \pntxtb ? }}\ls9 {\pntext }
{\ri0 \i0 \fs20 \cf1 \f3 \li300 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
All the C standards require is that a pointer of type 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
A
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 can be cast or stored into a pointer of type 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
B
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 and then recast or stored back into a pointer to type 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
A
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 having the same value as the original. Whatever magic the compiler writer chooses to accomplish this is best left to ones imagination. In practice, most pointers are the same physical size.
\par {\pntext }
}
}\pard 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\*\bkmkstart sn-alignment}{\*\bkmkend sn-alignment}
\par 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b1 \qj 
{\ri0 \i0 \fs41 \cf1 \f4 \li-960 \b1 \qj 
{\i0 \fs41 \sa0 \cf1 \f4 \b1 \sb200 
Variable Alignment Issues
\par 
}
}
}
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Every variable has a natural memory address alignment. The general rule is that an 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
N
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
-byte object is best held in a memory cell whose address is an 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
N
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
-byte multiple. When this rule is followed, the CPU and memory subsystems can access that value using the least amount of cycles, resulting in the best performance.
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
By using certain compiler attributes, or by performing explicit pointer arithmetic, one can cause an object to be stored into memory whose address is not a multiple of the object size. This is called an 
}
{\i1 \fs20 \cf1 \f3 \b0 \sb0 
{\i1 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
unaligned access
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
 and the extra processing involved often a kiss-of-death to performance.
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
For this reason, care must be taken when designing data elements used frequently in a program. While unaligned data are frequently encountered in network programming, the programmer must recognize them and use them sparingly.
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\*\bkmkstart sn-alignment-basic}{\*\bkmkend sn-alignment-basic}
\par 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b1 \qj 
{\ri0 \i0 \fs34 \cf1 \f4 \li-960 \b1 \qj 
{\i0 \fs34 \sa0 \cf1 \f4 \b1 \sb200 
Address Arithmetic
\par 
}
}
}
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
On some systems, this code snippet:
\par 
}
}
{\ri0 \i0 \ql \fs20 \cf1 \f5 \li0 \b0 
{\i0 \fs20 \sa200 \cf1 \f5 \b0 \sb200 
\line int * ip;\line char ch[32];\line \line ip = (int *) (ch + 1);\line *ip = 0;\line       
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
will work fine. On other systems it may produce a bus error or segmentation violation.
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
The behavior is hardware-specific. On platforms which run the Linux operating system, it is required that either:
\par 
}
}\pard \fi-360 \li {\*\pn \pnlvlbody \ilvl0 \ls0 \pndec \pnstart1 \pnindent \pntxta. }\ls10 {\pntext \f1 \'b7 \tab }
{\ri0 \i0 \fs20 \cf1 \f3 \li400 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
The hardware transparently handle unaligned accesses, or
\par {\pntext \f1 \'b7 \tab }
}
}\pard \pard \fi-360 \li {\*\pn \pnlvlbody \ilvl0 \ls0 \pndec \pnstart1 \pnindent \pntxta. }\ls11 {\pntext \f1 \'b7 \tab }
{\ri0 \i0 \fs20 \cf1 \f3 \li400 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Refuse to perform the unaligned access. Usually a processor trap is signaled. A Linux platform is strictly required to complain if it cannot correctly make unaligned accesses.
\par {\pntext \f1 \'b7 \tab }
}
}\pard 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
Systems which cannot directly perform unaligned accesses have special code enabled in the Linux kernel to respond to the processor trap by making the unaligned access in software and transparently resuming the program.
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
This works, but it very, very slow. An unaligned access in an inner loop is to be avoided.
\par 
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\*\bkmkstart sn-alignment-struct}{\*\bkmkend sn-alignment-struct}
\par 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b1 \qj 
{\ri0 \i0 \fs34 \cf1 \f4 \li-960 \b1 \qj 
{\i0 \fs34 \sa0 \cf1 \f4 \b1 \sb200 
Packed Structures
\par 
}
}
}
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
In most application programs, unintentional unaligned access is often related to using packed structures.
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
Packed structures are usually encountered where the programmer is trying to avoid the \ldblquote slack bytes\rdblquote  inserted by the compiler inside a structure so that its elements have structure offsets equal to their natural alignment. The following snippet illustrates this:
\par 
}
}
{\ri0 \i0 \ql \fs20 \cf1 \f5 \li0 \b0 
{\i0 \fs20 \sa200 \cf1 \f5 \b0 \sb200 
\line struct holes_s \{ \line   char  c1;  /* Assume a single byte for this */\line   int   i1;  /* On a natural boundary or not? */\line \} ;\line       
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Normally, the compiler will insert enough padding between the 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
c1
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 and 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
i1
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 elements so that 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
i1
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
 has the proper alignment.
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
The amount of padding could be 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
3
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 bytes on a 32-bit system, or 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
7
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
 bytes on a 64-bit system.
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Compilers will also insert slack bytes into the tail of a structure so that elements of an array of structures will have the proper alignment. Again, this could range from 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
1-3
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 bytes on a 32-bit system to 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
1-7
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
 bytes on a 64-bit system.
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
When using the contents of a packed data structure, consider expanding it (by copying each structure element by name into an unpacked cousin structure) rather than living with the extra processing.
\par 
}
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\*\bkmkstart sn-guidelines}{\*\bkmkend sn-guidelines}
\par 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b1 \qj 
{\ri0 \i0 \fs41 \cf1 \f4 \li-960 \b1 \qj 
{\i0 \fs41 \sa0 \cf1 \f4 \b1 \sb200 
Coding Guidelines
\par 
}
}
}
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb200 
To help maximize your 32-bit / 64-bit portability, follow these guidelines:
\par 
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\*\bkmkstart sn-guidelines-do}{\*\bkmkend sn-guidelines-do}
\par 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b1 \qj 
{\ri0 \i0 \fs34 \cf1 \f4 \li-960 \b1 \qj 
{\i0 \fs34 \sa0 \cf1 \f4 \b1 \sb200 
Do
\par 
}
}
}
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
}
}\pard \fi-360 \li {\*\pn \pnlvlblt \ilvl0 \ls12 \pnindent0 \pnf1 {\f2 \pntxtb ? }}\ls12 {\pntext }
{\ri0 \i0 \fs20 \cf1 \f3 \li300 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Do specify the compiler model, such as 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
-m32
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 or 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
-m64
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 on each compiler command line.
\par {\pntext }
}
}\pard \pard \fi-360 \li {\*\pn \pnlvlblt \ilvl0 \ls13 \pnindent0 \pnf1 {\f2 \pntxtb ? }}\ls13 {\pntext }
{\ri0 \i0 \fs20 \cf1 \f3 \li300 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Do specifiy the chosen compiler language on each compiler command line. Use 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
-std=
}
}
{\i1 \fs20 \cf1 \f5 \b0 \sb0 
{\i1 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
dialect
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 where 
}
{\i1 \fs20 \cf1 \f5 \b0 \sb0 
{\i1 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
dialect
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 is either 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
c99
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
, 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
c89
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
, 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
gnu99
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
, or 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
gnu89
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
.
\par {\pntext }
}
}\pard \pard \fi-360 \li {\*\pn \pnlvlblt \ilvl0 \ls14 \pnindent0 \pnf1 {\f2 \pntxtb ? }}\ls14 {\pntext }
{\ri0 \i0 \fs20 \cf1 \f3 \li300 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Do turn on every compiler warning you can find. Consider, as a minimum, the 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
-Wall
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
, 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
-Wextra
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
, 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
-Werror
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
, and 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
-pedantic
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 switches.
\par {\pntext }
}
}\pard \pard \fi-360 \li {\*\pn \pnlvlblt \ilvl0 \ls15 \pnindent0 \pnf1 {\f2 \pntxtb ? }}\ls15 {\pntext }
{\ri0 \i0 \fs20 \cf1 \f3 \li300 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Do compile with the 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
-O
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 switch to enable the optmizer to detect additional warnings. If debug using either gdb, ddd, or insight is anticipated, use the form 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
-O0
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 to run the optmizer and to prevent code rearrangement.
\par {\pntext }
}
}\pard \pard \fi-360 \li {\*\pn \pnlvlblt \ilvl0 \ls16 \pnindent0 \pnf1 {\f2 \pntxtb ? }}\ls16 {\pntext }
{\ri0 \i0 \fs20 \cf1 \f3 \li300 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Do correct every compiler warning by designing them away, not by casting them out.
\par {\pntext }
}
}\pard \pard \fi-360 \li {\*\pn \pnlvlblt \ilvl0 \ls17 \pnindent0 \pnf1 {\f2 \pntxtb ? }}\ls17 {\pntext }
{\ri0 \i0 \fs20 \cf1 \f3 \li300 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Do use 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
off_t
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 containers to hold file sizes and offsets.
\par {\pntext }
}
}\pard \pard \fi-360 \li {\*\pn \pnlvlblt \ilvl0 \ls18 \pnindent0 \pnf1 {\f2 \pntxtb ? }}\ls18 {\pntext }
{\ri0 \i0 \fs20 \cf1 \f3 \li300 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Do use 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
size_t
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 containers to hold object sizes that are exchanged with the operating system, such as for the 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
read(2)
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 system call.
\par {\pntext }
}
}\pard \pard \fi-360 \li {\*\pn \pnlvlblt \ilvl0 \ls19 \pnindent0 \pnf1 {\f2 \pntxtb ? }}\ls19 {\pntext }
{\ri0 \i0 \fs20 \cf1 \f3 \li300 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Do always use a \ldblquote 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
%llu
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
\rdblquote  
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
printf(3)
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 format specifier to output an 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
off_t
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 or 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
size_t
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 object.
\par {\pntext }
}
}\pard \pard \fi-360 \li {\*\pn \pnlvlblt \ilvl0 \ls20 \pnindent0 \pnf1 {\f2 \pntxtb ? }}\ls20 {\pntext }
{\ri0 \i0 \fs20 \cf1 \f3 \li300 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Do always cast an 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
off_t
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 or 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
size_t
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 object in a 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
printf(3)
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 argument list to a 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
(unsigned long long)
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 type.
\par {\pntext }
}
}\pard \pard \fi-360 \li {\*\pn \pnlvlblt \ilvl0 \ls21 \pnindent0 \pnf1 {\f2 \pntxtb ? }}\ls21 {\pntext }
{\ri0 \i0 \fs20 \cf1 \f3 \li300 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Do view every 
}
{\i1 \fs20 \cf1 \f3 \b0 \sb0 
{\i1 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
cast
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 as a potential portability problem.
\par {\pntext }
}
}\pard 
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\*\bkmkstart sn-guidelines-dont}{\*\bkmkend sn-guidelines-dont}
\par 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b0 \qj 
{\ri0 \i0 \fs20 \cf1 \f4 \li-960 \b1 \qj 
{\ri0 \i0 \fs34 \cf1 \f4 \li-960 \b1 \qj 
{\i0 \fs34 \sa0 \cf1 \f4 \b1 \sb200 
Don\rquote t
\par 
}
}
}
}
}
}
{\ri0 \i0 \fs20 \cf1 \f3 \li0 \b0 \qj 
}
}\pard \fi-360 \li {\*\pn \pnlvlblt \ilvl0 \ls22 \pnindent0 \pnf1 {\f2 \pntxtb ? }}\ls22 {\pntext }
{\ri0 \i0 \fs20 \cf1 \f3 \li300 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Do not use basic types, such as 
}
{\i0 \fs20 \cf1 \f5 \b0 \sb0 
{\i0 \fs20 \sa0 \cf1 \f5 \b0 \sb0 
short
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 to represent binary objects in files, sockets, or exported data structures.
\par {\pntext }
}
}\pard \pard \fi-360 \li {\*\pn \pnlvlblt \ilvl0 \ls23 \pnindent0 \pnf1 {\f2 \pntxtb ? }}\ls23 {\pntext }
{\ri0 \i0 \fs20 \cf1 \f3 \li300 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Do not use a 
}
{\i1 \fs20 \cf1 \f3 \b0 \sb0 
{\i1 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
cast
}
}
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
 simply to silence a compiler warning.
\par {\pntext }
}
}\pard \pard \fi-360 \li {\*\pn \pnlvlblt \ilvl0 \ls24 \pnindent0 \pnf1 {\f2 \pntxtb ? }}\ls24 {\pntext }
{\ri0 \i0 \fs20 \cf1 \f3 \li300 \b0 \qj 
{\i0 \fs20 \sa0 \cf1 \f3 \b0 \sb0 
Do not assume that the size of a structure is the sum of the sizes of its elements. The compiler may insert padding within a structure or append padding to the end of a structure. The amount of padding may change, depending on the compiler addressing model.
\par {\pntext }
}
}\pard 
}
}\sect }